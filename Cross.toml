[build]
dockerfile = "./docker/linux-cross/Dockerfile"
pre-build = [
    "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal --default-toolchain stable",
    ". $HOME/.cargo/env",
    "cargo install --force --locked bindgen-cli && mv $HOME/.cargo/bin/bindgen /usr/bin",
    "rm -rf $HOME/.cargo"
]

[build.env]
passthrough = [
    "CARGO_NDK_MAJOR_VERSION",
    "RUST_BACKTRACE",
    "RUST_LOG"
]

# Common settings for all Android targets
#[target.'cfg(target_os = "android")']
#image = "ghcr.io/cross-rs/android:latest"
#xargo = false

# Architecture-specific configurations
[target.aarch64-linux-android]
image = "ghcr.io/cross-rs/aarch64-linux-android:latest"
[target.aarch64-linux-android.env]
CARGO_TARGET_AARCH64_LINUX_ANDROID_LINKER = "aarch64-linux-android-clang"
CFLAGS = "-fPIC"

[target.armv7-linux-androideabi]
image = "ghcr.io/cross-rs/armv7-linux-androideabi:latest"
[target.armv7-linux-androideabi.env]
CARGO_TARGET_ARMV7_LINUX_ANDROIDEABI_LINKER = "armv7a-linux-androideabi-clang"
CFLAGS = "-fPIC"

[target.i686-linux-android]
image = "ghcr.io/cross-rs/i686-linux-android:latest"
[target.i686-linux-android.env]
CARGO_TARGET_I686_LINUX_ANDROID_LINKER = "i686-linux-android-clang"
CFLAGS = "-fPIC"

[target.x86_64-linux-android]
image = "ghcr.io/cross-rs/x86_64-linux-android:latest"
[target.x86_64-linux-android.env]
CARGO_TARGET_X86_64_LINUX_ANDROID_LINKER = "x86_64-linux-android-clang"
CFLAGS = "-fPIC"

[target.x86_64-unknown-linux-gnu]
image = "ghcr.io/cross-rs/x86_64-pc-windows-gnu:latest"
pre-build = [
    "apt-get update",
    "apt-get install -y libsqlite3-dev"
]
#pre-build = [
#    # Install build dependencies including SQLite
#    "apt-get update && apt-get install -y mingw-w64 mingw-w64-tools zip",
#    # Download and extract SQLite amalgamation
#    "curl -L 'https://www.sqlite.org/2024/sqlite-amalgamation-3450100.zip' -o sqlite.zip",
#    "unzip sqlite.zip",
#    "cd sqlite-amalgamation-3450100",
#    # Compile SQLite for Windows
#    "i686-w64-mingw32-gcc -c sqlite3.c -o sqlite3.o",
#    "i686-w64-mingw32-ar rcs libsqlite3.a sqlite3.o",
#    # Install to MinGW lib directory
#    "cp libsqlite3.a /usr/i686-w64-mingw32/lib/"
#]

[target.x86_64-pc-windows-gnu]
pre-build = ["apt-get update && apt-get install -y libsqlite3-dev"]

[target.i686-pc-windows-gnu]
image = "ghcr.io/cross-rs/i686-pc-windows-gnu:latest"
# No pre-build needed now since SQLite is included in the Dockerfile

CARGO_TARGET_X86_64_LINUX_ANDROID_LINKER = "x86_64-linux-android-clang"
CFLAGS = "-fPIC"

# MIPS targets are dropped to Tier 3
# https://github.com/rust-lang/compiler-team/issues/648
# FIXME: build-std with sequence is supported only on git
# [target.mips-unknown-linux-gnu]
# build-std = ["std", "panic_abort", "proc_macro"]
# [target.mips-unknown-linux-musl]
# build-std = ["std", "panic_abort", "proc_macro"]
# [target.mips64-unknown-linux-gnuabi64]
# build-std = ["std", "panic_abort", "proc_macro"]
# [target.mips64-unknown-linux-muslabi64]
# build-std = ["std", "panic_abort", "proc_macro"]
# [target.mips64el-unknown-linux-gnuabi64]
# build-std = ["std", "panic_abort", "proc_macro"]
# [target.mips64el-unknown-linux-muslabi64]
# build-std = ["std", "panic_abort", "proc_macro"]
# [target.mipsel-unknown-linux-gnu]
# build-std = ["std", "panic_abort", "proc_macro"]
# [target.mipsel-unknown-linux-musl]
# build-std = ["std", "panic_abort", "proc_macro"]

